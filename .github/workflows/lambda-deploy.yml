# Workflow name that appears in GitHub Actions UI
name: Lambda CI/CD

# Define environment variables used across jobs
env:
  NODE_VERSION: '18'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Add environment-specific config files
  CONFIG_PATH: ./config

# Define when this workflow will be triggered
on:
  push:
    branches: 
      - dev    # Development branch
      - stag   # Staging branch
      - master # Production branch
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: 
      - dev
      - stag
      - master

jobs:
  # Job for building and testing the application
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Set up Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm' # Enable npm caching
        
    # Install project dependencies
    - name: Install dependencies
      run: |
        npm ci
        npm audit # Security check
      
    # Run test suite
    - name: Run tests
      run: npm test
      
    # Run linting
    - name: Lint code
      run: npm run lint
      
    # Cache build artifacts
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          dist
          node_modules
        key: ${{ runner.os }}-build-${{ github.sha }}
      
    # Send notification to Slack for any branch update
    - name: Notify Slack on Branch Update
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'Branch update in ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Deployment job template
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: development
            branch: dev
            requires_approval: false
          - environment: staging
            branch: stag
            requires_approval: false
          - environment: production
            branch: master
            requires_approval: true
    if: github.ref == format('refs/heads/{0}', matrix.branch)
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    # Restore cached build
    - uses: actions/cache@v3
      with:
        path: |
          dist
          node_modules
        key: ${{ runner.os }}-build-${{ github.sha }}
    
    # Configure AWS credentials for deployment
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # Load environment-specific configuration
    - name: Load environment config
      run: |
        echo "Loading config for ${{ matrix.environment }}"
        source ${{ env.CONFIG_PATH }}/${{ matrix.environment }}.env
        
    # Deploy to multiple Lambda functions
    - name: Deploy to Lambda Functions
      id: deploy
      run: |
        # Read Lambda function names from environment variable
        IFS=',' read -ra LAMBDA_FUNCTIONS <<< "${{ secrets.LAMBDA_FUNCTIONS }}"
        
        # Create deployment package
        zip -r function.zip . -x "*.git*" "test/*" "docs/*" "*.md"
        
        # Deploy to each Lambda function
        for function_name in "${LAMBDA_FUNCTIONS[@]}"; do
          echo "Deploying to $function_name"
          aws lambda update-function-code \
            --function-name "$function_name" \
            --zip-file fileb://function.zip \
            --publish
          
          # Add version/alias management if needed
          if [ "${{ matrix.environment }}" = "production" ]; then
            VERSION=$(aws lambda publish-version --function-name "$function_name" --query 'Version' --output text)
            aws lambda update-alias \
              --function-name "$function_name" \
              --name "PROD" \
              --function-version "$VERSION"
          fi
        done
          
    # Send deployment notification to Slack
    - name: Notify Slack on Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '${{ matrix.environment }} deployment completed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success() 